`timescale 1ns / 1ps

module fir_filter_tb;

  // Instantiate the DUT
  logic clk;
  logic rst;
  logic signed [15:0] x_in;
  logic signed [15:0] y_out;
  fir_filter dut (
    .clk(clk),
    .rst(rst),
    .x_in(x_in),
    .y_out(y_out)
  );

  // Clock generation
  always begin
    clk <= 0;
    #5;
    clk <= 1;
    #5;
  end

  // Testbench signals
  logic signed [15:0] test_vector [0:9];
  integer i;

  initial begin
    // Initialize test vectors
    test_vector[0] = 16'd10;
    test_vector[1] = 16'd20;
    test_vector[2] = 16'd30;
    test_vector[3] = 16'd20;
    test_vector[4] = 16'd10;
    test_vector[5] = 16'd0;
    test_vector[6] = 16'd-10;
    test_vector[7] = 16'd-20;
    test_vector[8] = 16'd-30;
    test_vector[9] = 16'd-10;

    // Reset the DUT
    rst <= 1;
    #10;
    rst <= 0;

    // Apply test vectors
    for (i = 0; i < 10; i++) begin
      x_in <= test_vector[i];
      #10;
    end

    $finish;
  end

endmodule
